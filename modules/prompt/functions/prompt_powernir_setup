# A fork of the Sorin theme. Various tweaks:
# - colors work better with solarized theme
# - better display of hashed (named) directories
# - slight changes to how git information is presented
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#
# Tweaks by:
#   Nir Friedman <quicknir@gmail.com>

# 16 Solarized Terminal Colors
# -- ---------------
#  0 base02 (light black)
#  1 red
#  2 green
#  3 yellow
#  4 blue
#  5 magenta
#  6 cyan
#  7 base2 (dark white)
#  8 base03 (dark black)
#  9 orange
# 10 base01 (dark dark grey)
# 11 base00 (dark grey)
# 12 base0 (light grey)
# 13 violet
# 14 base1 (light light grey)
# 15 base3 (bright white)

pmodload 'helper'
source ${ZDOTDIR:-$HOME}/.zprezto/modules/prompt/functions/prompt_powerlevel9k_setup

#prompt_powerlevel9k_setup "$@"

#POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
#POWERLEVEL9K_SHORTEN_DELIMITER=""
#POWERLEVEL9K_SHORTEN_STRATEGY="truncate_from_right"

prompt_nirdir() {
  typeset -AH dir_states
  dir_states=(
    "DEFAULT"         "FOLDER_ICON"
    "HOME"            "HOME_ICON"
    "HOME_SUBFOLDER"  "HOME_SUB_ICON"
    "NOT_WRITABLE"    "LOCK_ICON"
  )
  local current_state="DEFAULT"

  if [[ "${POWERLEVEL9K_DIR_SHOW_WRITABLE}" == true && ! -w "$PWD" ]]; then
    current_state="NOT_WRITABLE"
  elif [[ $(print -P "%~") == '~' ]]; then
    current_state="HOME"
  elif [[ $(print -P "%~") == '~'* ]]; then
    current_state="HOME_SUBFOLDER"
  fi

  # Expand pwd taking into account hashed directories
  local pwd_esc="%~"
  local pwd_expand=${(%)pwd_esc}

  # Split on /
  local arr
  arr=("${(s:/:)pwd_expand}")
  local start

  # if first token starts with ~, don't apply first letter transformation to it
  if [[ ${a[1]:0:1} == "~" ]]; then
    start=1
  else
    start=2
  fi

  for (( i=$start; i < $#arr; i++ )); do
    if [[ ${arr[i]:0:1} == "." ]]; then
      arr[i]=${arr[i]:0:2}
    else
      arr[i]=${arr[i]:0:1}
    fi
  done

  current_path="${(j:/:)arr}"

  "$1_prompt_segment" "$0_${current_state}" "$2" "blue" "$DEFAULT_COLOR" "${current_path}" "${dir_states[$current_state]}"
}

# Context: user@hostname (who am I and where am I)
# Note that if $DEFAULT_USER is not set, this prompt segment will always print
set_default POWERLEVEL9K_ALWAYS_SHOW_CONTEXT false
set_default POWERLEVEL9K_ALWAYS_SHOW_USER false
set_default POWERLEVEL9K_CONTEXT_TEMPLATE "%n@%m"

DEFAULT_USER="nir"

prompt_nircontext() {
  local current_state="DEFAULT"
  typeset -AH context_states
  context_states=(
    "ROOT"      "yellow"
    "DEFAULT"   "011"
  )

  local content=""

  if [[ "$POWERLEVEL9K_ALWAYS_SHOW_CONTEXT" == true ]] || [[ "$(whoami)" != "$DEFAULT_USER" ]] || [[ -n "$SSH_CLIENT" || -n "$SSH_TTY" ]]; then

      if [[ $(print -P "%#") == '#' ]]; then
        current_state="ROOT"
      fi

      content="${POWERLEVEL9K_CONTEXT_TEMPLATE}"

  elif [[ "$POWERLEVEL9K_ALWAYS_SHOW_USER" == true ]]; then
      content="$(whoami)"
  else
      return
  fi

  "$1_prompt_segment" "${0}_${current_state}" "$2" "$DEFAULT_COLOR" "${context_states[$current_state]}" "${content}"
}

#POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir rbenv)
#POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs history time)
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(nircontext nirdir)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator)

build_left_prompt() {
  prompt_context "left" 1
  prompt_nirdir "left" 2

  echo -n "%k%F{$CURRENT_BG}$(print_icon 'LEFT_SEGMENT_SEPARATOR')"
  echo -n "%f$(print_icon 'LEFT_SEGMENT_END_SEPARATOR')"
  CURRENT_BG=''
}

build_right_prompt() {
  prompt_status "right" 1
  prompt_root_indicator "right" 2

}

powerlevel9k_prepare_prompts() {
  RETVAL=$?
  RETVALS=( "$pipestatus[@]" )

  _P9K_COMMAND_DURATION=$((EPOCHREALTIME - _P9K_TIMER_START))

  PROMPT='%f%b%k$(build_left_prompt)'
  RPROMPT_PREFIX=''
  RPROMPT_SUFFIX=''
  # RPROMPT='$RPROMPT_PREFIX%f%b%k$(build_right_prompt)%{$reset_color%}$RPROMPT_SUFFIX'
}

set_default POWERLEVEL9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS " "
left_prompt_segment() {
  local current_index=$2
  local joined=false

  local bg="%K{$3}"
  local fg="%F{$4}"

  if [[ $CURRENT_BG != 'NONE' ]]; then
    echo -n "$bg%F{$CURRENT_BG}"
    # Middle segment
    echo -n "$(print_icon 'LEFT_SEGMENT_SEPARATOR')$POWERLEVEL9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS"
  else
    # First segment
        echo -n "${bg}$POWERLEVEL9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS"
  fi

  # Print the content of the segment, if there is any
  [[ -n "$5" ]] && echo -n "${fg}${5}"
  # echo -n "${POWERLEVEL9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS}"

  CURRENT_BG=$3
  last_left_element_index=$current_index
}
